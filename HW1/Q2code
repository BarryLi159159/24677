import numpy as np
import matplotlib.pyplot as plt

# Parameters
G = np.array([[1, 0.2, 0.1],
              [0.1, 2, 0.1],
              [0.3, 0.1, 3]])

gamma_values = [3, 5]
alpha = 1.2
sigma = 0.1
num_steps = 20

# Initial conditions
initial_conditions = [
    [0.1, 0.1, 0.1],  # First set
    [0.1, 0.01, 0.02]  # Second set
]

def update_power(p, G, alpha, gamma, sigma):
    new_p = np.zeros_like(p)
    for i in range(3):
        interference = sum(G[i, j] * p[j] for j in range(3) if j != i)
        new_p[i] = (alpha * gamma / G[i, i]) * (sigma**2 + interference)
    return new_p

def simulate_power_control(initial_p, G, alpha, gamma, sigma, num_steps):
    p = np.array(initial_p)
    p_history = [p]
    sinr_history = []

    for k in range(num_steps):
        sinr = G.diagonal() * p / (sigma**2 + G @ p - G.diagonal() * p)
        sinr_history.append(sinr)
        p = update_power(p, G, alpha, gamma, sigma)
        p_history.append(p)

    return np.array(p_history), np.array(sinr_history)

for gamma in gamma_values:
    for initial_p in initial_conditions:
        p_history, sinr_history = simulate_power_control(initial_p, G, alpha, gamma, sigma, num_steps)
        
        # Plotting
        plt.figure()
        plt.plot(p_history)
        plt.title(f'Power levels over time for gamma={gamma} and initial condition={initial_p}')
        plt.xlabel('Time steps')
        plt.ylabel('Power levels')
        plt.legend(['p1', 'p2', 'p3'])
        plt.show()

        plt.figure()
        plt.plot(sinr_history)
        plt.axhline(y=alpha*gamma, color='r', linestyle='--')
        plt.title(f'SINR over time for gamma={gamma} and initial condition={initial_p}')
        plt.xlabel('Time steps')
        plt.ylabel('SINR')
        plt.legend(['S1', 'S2', 'S3'])
        plt.show()
